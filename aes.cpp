#include "aes.hpp"
#include <fstream>
#include <sstream>

using namespace std;

Aes::Aes(){
    this->atualRound = 0;

};

// Sinaliza que sera em CTR
void Aes::SetCTR(bool value){
    this->isCTR = value;
}

void Aes::Cifrar(string texto, string chave, int rounds){
    // Alocando memoria para o texto em formato unsigned char
    unsigned char *cifrado = new unsigned char[texto.size()];
    unsigned char chaveExpandida[240];
    unsigned char hash[16];

    if(!this->isCTR)
        cout << "Cifrando no modo ECB..." << endl;
    else{
        cout << "Cifrando no modo CTR..." << endl;
        this->GenerateHash(hash);
    }

    // Salvando header do formato BMP
    string header = texto.substr(0, 34);
    texto.erase(0, 34);

    // transformando texto em unsigned char
    for(unsigned i = 0; i < texto.size(); i++){
        cifrado[i] = texto[i];
        // cout << hex << (int) cifrado[i];
    }
    
    // colocando chave inicial na chave expandida
    for(unsigned i = 0; i < 16; i++)
        chaveExpandida[i] = chave[i];

    // gerando chave expandidade
    this->KeySchedule(chaveExpandida);
    
    // ECB -> particionando texto em partes de 16 bytes
    for(unsigned i = 0; i < texto.size() / 16; i++){      
        // iterator de rounds
        int iRound = 0;

        // Se for CTR, adicionar counter a chave expandida do bloco
        if(this->isCTR){
            this->KeyCounter(chaveExpandida, hash, i);
        }

        // AddRound inicial
        this->AddRoundKey(&cifrado[i*16], chaveExpandida);

        // rounds AES
        for(unsigned j = 0 ; j < rounds-1; j++){
            this->SubBytes(&cifrado[i*16]);
            this->ShiftRows(&cifrado[i*16]);
            this->MixColumns(&cifrado[i*16]);
            this->AddRoundKey(&cifrado[i*16], chaveExpandida + (16 * (iRound + 1)));
            iRound++;
        }

        // Rodada final sem MixColum
        this->SubBytes(&cifrado[i*16]);
        this->ShiftRows(&cifrado[i*16]);
        this->AddRoundKey(&cifrado[i*16], chaveExpandida + (16 * (iRound + 1)));
    }   

    // colocando header antes de criar a imagem cifrada
    string final = header;
    
    // criando imagem cifrada
    for(unsigned i = 0; i < texto.size(); i++)
        final += (int) (cifrado[i]);

    //  criando e armazenando em arquivo
    ofstream outf("cifrado.bmp", ofstream::binary);
        outf.write(final.c_str(), final.size());
    outf.close();

    // libera da memória
    delete cifrado;

    cout << "Cifrado com sucesso, arquivo gerado: result.bmp";
}

void Aes::Decifrar(string texto, string chave, int rounds){
    // Alocando memoria para o texto em formato unsigned char
    // unsigned char cifrado[16] = {0x51,0x88,0xC6,0x47,0x4B,0x22,0x8C,0xBD,0xD2,0x42,0xE9,0x12,0x5E,0xBE,0x1D,0x53};
    unsigned char *cifrado = new unsigned char[texto.size()];
    unsigned char chaveExpandida[240];
    unsigned char hash[16];

    if(!isCTR)
        cout << "Decifrando no modo ECB..." << endl;
    else{
        string hashText;
        cout << "Decifrando no modo CTR..." << endl;
        cout << "Digite a hash utilizada na cifra: ";
        getchar();
        getline(cin, hashText);

        string parte = "0x";
        int j = 0;
        for(unsigned i = 0; i < hashText.size()+1; i++){
            if(i != hashText.size() && hashText[i] != ' ')
                parte += hashText[i];
            else{
                hash[j] = (unsigned char) stoul(parte, 0, 16);
                j++;

                parte = "0x";
            }
        }
        // 82 8b cc 49 4f de d3 b6 8 a2 6d 2b 8b 77 c1 5b
        // for(int i = 0; i < 16; i++){
        //     cout << hex << (int) hash[i] << " ";
        // }
        // cout << endl;
    }

    // Salvando header do formato BMP
    string header = texto.substr(0, 34);
    texto.erase(0, 34);

    // transformando texto em unsigned char
    for(unsigned i = 0; i < texto.size(); i++){
        cifrado[i] = texto[i];
        // cout << hex << (int) cifrado[i];
    }
    
    // colocando chave inicial na chave expandida
    for(unsigned i = 0; i < 16; i++)
        chaveExpandida[i] = chave[i];

    // gerando chave expandidade
    this->KeySchedule(chaveExpandida);
    
    // ECB -> particionando texto em partes de 16 bytes
    for(unsigned i = 0; i < texto.size() / 16; i++){    
        // Se for CTR, adicionar counter a chave expandida do bloco
        if(this->isCTR){
            this->KeyCounter(chaveExpandida, hash, i);
        }
          
        // iterator de rounds
        int iRound = rounds-1;

        // Rodada Inicial sem MixColum
        this->AddRoundKey(&cifrado[i*16], chaveExpandida + (16 * (iRound + 1)));
        this->InverseShiftRows(&cifrado[i*16]);
        this->InverseSubBytes(&cifrado[i*16]);
        iRound--;

        // rounds AES
        for(unsigned j = 0 ; j < rounds-1; j++){
            this->AddRoundKey(&cifrado[i*16], chaveExpandida + (16 * (iRound + 1)));
            this->InverseMixColumns(&cifrado[i*16]);
            this->InverseShiftRows(&cifrado[i*16]);
            this->InverseSubBytes(&cifrado[i*16]);
            iRound--;
        }

        // AddRound final
        this->AddRoundKey(&cifrado[i*16], chaveExpandida);
    }   
    
    // debug
    // for(unsigned i = 0; i < 16; i++)
    //     cout << hex << (int) (cifrado[i]) << " ";
    
    // colocando header antes de criar a imagem cifrada
    string final = header;
    
    // criando imagem cifrada
    for(unsigned i = 0; i < texto.size(); i++)
        final += (int) (cifrado[i]);

    //  criando e armazenando em arquivo
    ofstream outf("decifrado.bmp", ofstream::binary);
        outf.write(final.c_str(), final.size());
    outf.close();

    // libera da memória
    delete cifrado;

    cout << "Decifrado com sucesso, arquivo gerado: decifrado.bmp";
}

void Aes::GenerateHash(unsigned char *hash){    
    cout << "Gerando Hash..." << endl;
    
    cout << "Sua hash eh: ";
    for(unsigned i = 0 ; i < 16; i++){
        hash[i] = rand() % 255;

        cout << hex << (int) hash[i] << " ";
    }

    cout << endl;
}

void Aes::KeyCounter(unsigned char *chaveExpandida, unsigned char *hash, int indice){
    string number = to_string(indice);
    for(unsigned i = 0; i < number.size(); i++)
        hash[16-i] ^= number[number.size()-1-i];
    
    int j = 0;
    for(unsigned i = 0; i < 240; i++){
        chaveExpandida[i] ^= hash[j];

        j++;

        if(j == 16)
            j = 0;
    }
}

void Aes::AddRoundKey(unsigned char *bloco, unsigned char *keyBloco){
    for(unsigned i = 0; i < 16; i++){
        bloco[i] = bloco[i] ^ keyBloco[i];
        // std::cout << bloco[i] << std::endl;
        // std::cout << (int) bloco[i] << std::endl;
    }
};

void Aes::SubBytes(unsigned char *bloco){
    for(unsigned i = 0; i < 16; i++){    
        bloco[i] = sBox[bloco[i]];
        // std::cout << (int) atual_byte << std::endl;
        // std::cout << (int) sBox[(int) atual_byte] << std::endl;
    }
};

void Aes::InverseSubBytes(unsigned char *bloco){
    for(unsigned i = 0; i < 16; i++){    
        bloco[i] = sBoxInverse[bloco[i]];
        // std::cout << (int) atual_byte << std::endl;
        // std::cout << (int) sBox[(int) atual_byte] << std::endl;
    }
};

void Aes::ShiftRows(unsigned char *bloco){
    unsigned char aux, aux2, aux3;
    // linha 2
    aux = bloco[1];
    bloco[1] = bloco[5];
    bloco[5] = bloco[9];
    bloco[9] = bloco[13];
    bloco[13] = aux;

    // linha 3
    aux = bloco[2];
    aux2 = bloco[6];
    bloco[2] = bloco[10];
    bloco[6] = bloco[14];
    bloco[10] = aux;
    bloco[14] = aux2;
    
    // linha 4
    aux = bloco[3];
    aux2 = bloco[7];
    aux3 = bloco[11];
    bloco[3] = bloco[15];
    bloco[7] = aux;
    bloco[11] = aux2;
    bloco[15] = aux3;
};

void Aes::InverseShiftRows(unsigned char *bloco){
    unsigned char aux, aux2, aux3;
    // linha 2
    aux = bloco[13];
    bloco[13] = bloco[9];
    bloco[9] = bloco[5];
    bloco[5] = bloco[1];
    bloco[1] = aux;

    // a    b   c   d
    // e    f   g   h
    // i    j   k   l
    // m    n   o   p

    // a    f   k   p
    // e    j   o   d
    // i    n   c   h
    // m    b   g   l

    // linha 3
    aux = bloco[14];
    aux2 = bloco[10];
    bloco[14] = bloco[6];
    bloco[10] = bloco[2];
    bloco[6] = aux;
    bloco[2] = aux2;
    
    // linha 4
    aux = bloco[15];
    aux2 = bloco[11];
    aux3 = bloco[7];

    bloco[15] = bloco[3];
    bloco[11] = aux;
    bloco[7] = aux2;
    bloco[3] = aux3;
};

// Codigo baseado em trecho de codigo de exemplo na Wiki https://en.wikipedia.org/wiki/Rijndael_MixColumns#Implementation_example
void Aes::MixColumns(unsigned char *bloco){
    unsigned char vetorx2[] =
    {
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
        0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
        0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
        0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
        0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
        0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
        0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
        0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
        0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
        0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
    };
    unsigned char vetorx3[] =
    {
        0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
        0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
        0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
        0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
        0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
        0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
        0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
        0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
        0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
        0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
        0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
        0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
        0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
        0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
        0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
        0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
    };

    unsigned char aux[16];

    aux[0] = vetorx2[bloco[0]] ^ vetorx3[bloco[1]] ^ bloco[2] ^ bloco[3];
	aux[1] = bloco[0] ^ vetorx2[bloco[1]] ^ vetorx3[bloco[2]] ^ bloco[3];
	aux[2] = bloco[0] ^ bloco[1] ^ vetorx2[bloco[2]] ^ vetorx3[bloco[3]];
	aux[3] = vetorx3[bloco[0]] ^ bloco[1] ^ bloco[2] ^ vetorx2[bloco[3]];

	aux[4] = vetorx2[bloco[4]] ^ vetorx3[bloco[5]] ^ bloco[6] ^ bloco[7];
	aux[5] = bloco[4] ^ vetorx2[bloco[5]] ^ vetorx3[bloco[6]] ^ bloco[7];
	aux[6] = bloco[4] ^ bloco[5] ^ vetorx2[bloco[6]] ^ vetorx3[bloco[7]];
	aux[7] = vetorx3[bloco[4]] ^ bloco[5] ^ bloco[6] ^ vetorx2[bloco[7]];

	aux[8] = vetorx2[bloco[8]] ^ vetorx3[bloco[9]] ^ bloco[10] ^ bloco[11];
	aux[9] = bloco[8] ^ vetorx2[bloco[9]] ^ vetorx3[bloco[10]] ^ bloco[11];
	aux[10] = bloco[8] ^ bloco[9] ^ vetorx2[bloco[10]] ^ vetorx3[bloco[11]];
	aux[11] = vetorx3[bloco[8]] ^ bloco[9] ^ bloco[10] ^ vetorx2[bloco[11]];

	aux[12] = vetorx2[bloco[12]] ^ vetorx3[bloco[13]] ^ bloco[14] ^ bloco[15];
	aux[13] = bloco[12] ^ vetorx2[bloco[13]] ^ vetorx3[bloco[14]] ^ bloco[15];
	aux[14] = bloco[12] ^ bloco[13] ^ vetorx2[bloco[14]] ^ vetorx3[bloco[15]];
	aux[15] = vetorx3[bloco[12]] ^ bloco[13] ^ bloco[14] ^ vetorx2[bloco[15]];

	for (int i = 0; i < 16; i++) {
		bloco[i] = aux[i];
	}
};

void Aes::InverseMixColumns(unsigned char *bloco){
    unsigned char vetorx9[256] =
    {
        0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
        0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
        0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
        0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
        0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
        0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
        0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
        0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
        0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
        0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
        0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
        0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
        0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
        0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
        0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
        0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
    };

    unsigned char vetorx11[256] =
    {
        0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
        0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
        0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
        0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
        0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
        0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
        0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
        0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
        0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
        0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
        0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
        0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
        0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
        0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
        0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
        0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
    };

    unsigned char vetorx13[256] =
    {
        0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
        0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
        0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
        0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
        0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
        0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
        0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
        0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
        0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
        0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
        0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
        0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
        0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
        0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
    };

    unsigned char vetorx14[256] =
    {
        0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
        0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
        0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
        0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
        0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
        0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
        0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
        0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
        0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
        0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
        0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
        0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
        0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
        0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
        0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
        0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
    };

    unsigned char aux[16];

    // Seguindo o padrão de calculo da Wiki
    aux[0] = vetorx14[bloco[0]] ^ vetorx11[bloco[1]] ^ vetorx13[bloco[2]] ^ vetorx9[bloco[3]];
	aux[1] = vetorx9[bloco[0]] ^ vetorx14[bloco[1]] ^ vetorx11[bloco[2]] ^ vetorx13[bloco[3]];
	aux[2] = vetorx13[bloco[0]] ^ vetorx9[bloco[1]] ^ vetorx14[bloco[2]] ^ vetorx11[bloco[3]];
	aux[3] = vetorx11[bloco[0]] ^ vetorx13[bloco[1]] ^ vetorx9[bloco[2]] ^ vetorx14[bloco[3]];

	aux[4] = vetorx14[bloco[4]] ^ vetorx11[bloco[5]] ^ vetorx13[bloco[6]] ^ vetorx9[bloco[7]];
	aux[5] = vetorx9[bloco[4]] ^ vetorx14[bloco[5]] ^ vetorx11[bloco[6]] ^ vetorx13[bloco[7]];
	aux[6] = vetorx13[bloco[4]] ^ vetorx9[bloco[5]] ^ vetorx14[bloco[6]] ^ vetorx11[bloco[7]];
	aux[7] = vetorx11[bloco[4]] ^ vetorx13[bloco[5]] ^ vetorx9[bloco[6]] ^ vetorx14[bloco[7]];

	aux[8] = vetorx14[bloco[8]] ^ vetorx11[bloco[9]] ^ vetorx13[bloco[10]] ^ vetorx9[bloco[11]];
	aux[9] = vetorx9[bloco[8]] ^ vetorx14[bloco[9]] ^ vetorx11[bloco[10]] ^ vetorx13[bloco[11]];
	aux[10] = vetorx13[bloco[8]] ^ vetorx9[bloco[9]] ^ vetorx14[bloco[10]] ^ vetorx11[bloco[11]];
	aux[11] = vetorx11[bloco[8]] ^ vetorx13[bloco[9]] ^ vetorx9[bloco[10]] ^ vetorx14[bloco[11]];

	aux[12] = vetorx14[bloco[12]] ^ vetorx11[bloco[13]] ^ vetorx13[bloco[14]] ^ vetorx9[bloco[15]];
	aux[13] = vetorx9[bloco[12]] ^ vetorx14[bloco[13]] ^ vetorx11[bloco[14]] ^ vetorx13[bloco[15]];
	aux[14] = vetorx13[bloco[12]] ^ vetorx9[bloco[13]] ^ vetorx14[bloco[14]] ^ vetorx11[bloco[15]];
	aux[15] = vetorx11[bloco[12]] ^ vetorx13[bloco[13]] ^ vetorx9[bloco[14]] ^ vetorx14[bloco[15]];

	for (int i = 0; i < 16; i++) {
		bloco[i] = aux[i];
	}
};

void Aes::KeySchedule(unsigned char *key){
    // tabela rcon pre calculada
    unsigned char rcon[256] = {
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
        0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
        0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
        0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
        0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
        0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
        0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
        0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
        0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
    };

    int c = 16; // contador de blocos criados
    int i = 1; // contador de rcon
    unsigned char aux[4]; // auxiliar

    // enquanto nao terminar de expandir, coloquei ate 240 para que seja possivel ate 14 rounds
    while( c < 240 ){
        // coluna atual
        for(unsigned j = 0; j < 4; j++){
            aux[j] = key[j + c - 4];
        }

        // se coluna atual for a primeira de seu bloco ( round )
        if(c % 16 == 0){
            // rotate
            unsigned char aux2;
            aux2 = aux[0];
            aux[0] = aux[1];
            aux[1] = aux[2];
            aux[2] = aux[3];
            aux[3] = aux2;

            // sub pelo sbox
            aux[0] = sBox[aux[0]];
            aux[1] = sBox[aux[1]];
            aux[2] = sBox[aux[2]];
            aux[3] = sBox[aux[3]];

            // xor
            aux[0] = aux[0] ^ rcon[i];

            // incrementa rcon
            i++;
        }

        // xor entre os elementos com a coluna anterior
        for( unsigned j = 0; j < 4; j++){
            key[c] = key[c - 16] ^ aux[j];
            c++;
        }
    }
}